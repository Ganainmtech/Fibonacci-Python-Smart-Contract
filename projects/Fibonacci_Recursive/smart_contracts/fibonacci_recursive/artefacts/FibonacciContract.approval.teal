#pragma version 10

smart_contracts.fibonacci_recursive.contract_recursive.FibonacciContract.approval_program:
    intcblock 1 0
    bytecblock 0x151f7c75
    callsub __puya_arc4_router__
    return


// smart_contracts.fibonacci_recursive.contract_recursive.FibonacciContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // contract_recursive.py:8
    // class FibonacciContract(arc4.ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@8
    pushbytess 0x81ff7d22 0x6e5bff59 0x91b3d9dd // method "create_fibonacci()void", method "compute_fibonacci(uint64)uint64", method "get_result()uint64"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_fibonacci_route@2 __puya_arc4_router___compute_fibonacci_route@3 __puya_arc4_router___get_result_route@4
    intc_1 // 0
    retsub

__puya_arc4_router___create_fibonacci_route@2:
    // contract_recursive.py:12-15
    // @arc4.abimethod(
    //     allow_actions=["NoOp"],
    //     create="require",
    // )
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    retsub

__puya_arc4_router___compute_fibonacci_route@3:
    // contract_recursive.py:22
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract_recursive.py:8
    // class FibonacciContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // contract_recursive.py:22
    // @arc4.abimethod
    callsub compute_fibonacci
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___get_result_route@4:
    // contract_recursive.py:36
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_result
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@8:
    // contract_recursive.py:8
    // class FibonacciContract(arc4.ARC4Contract):
    intc_1 // 0
    retsub


// smart_contracts.fibonacci_recursive.contract_recursive.FibonacciContract.compute_fibonacci(n: uint64) -> uint64:
compute_fibonacci:
    // contract_recursive.py:22-23
    // @arc4.abimethod
    // def compute_fibonacci(self, n: UInt64) -> UInt64:
    proto 1 1
    // contract_recursive.py:27-28
    // # Base case for recursion
    // if n == 0:
    frame_dig -1
    bnz compute_fibonacci_else_body@2
    // contract_recursive.py:29
    // return UInt64(0)
    intc_1 // 0
    retsub

compute_fibonacci_else_body@2:
    // contract_recursive.py:30
    // elif n == 1:
    frame_dig -1
    intc_0 // 1
    ==
    bz compute_fibonacci_else_body@4
    // contract_recursive.py:31
    // return UInt64(1)
    intc_0 // 1
    retsub

compute_fibonacci_else_body@4:
    // contract_recursive.py:33-34
    // # Recursive case: fib(n) = fib(n-1) + fib(n-2)
    // return self.compute_fibonacci(n - 1) + self.compute_fibonacci(n - 2)
    frame_dig -1
    intc_0 // 1
    -
    callsub compute_fibonacci
    frame_dig -1
    pushint 2 // 2
    -
    callsub compute_fibonacci
    +
    retsub


// smart_contracts.fibonacci_recursive.contract_recursive.FibonacciContract.get_result() -> uint64:
get_result:
    // contract_recursive.py:36-37
    // @arc4.abimethod
    // def get_result(self) -> UInt64:
    proto 0 1
    // contract_recursive.py:41
    // return self.result
    intc_1 // 0
    pushbytes "result"
    app_global_get_ex
    assert // check self.result exists
    retsub
