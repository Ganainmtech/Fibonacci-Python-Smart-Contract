#pragma version 10

smart_contracts.fibonacci_iterative.contract_iterative.FibonacciContract.approval_program:
    intcblock 0 1
    bytecblock 0x151f7c75 "result"
    callsub __puya_arc4_router__
    return


// smart_contracts.fibonacci_iterative.contract_iterative.FibonacciContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // contract_iterative.py:9
    // class FibonacciContract(arc4.ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@8
    pushbytess 0x81ff7d22 0x6e5bff59 0x91b3d9dd // method "create_fibonacci()void", method "compute_fibonacci(uint64)uint64", method "get_result()uint64"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_fibonacci_route@2 __puya_arc4_router___compute_fibonacci_route@3 __puya_arc4_router___get_result_route@4
    intc_0 // 0
    retsub

__puya_arc4_router___create_fibonacci_route@2:
    // contract_iterative.py:13-16
    // @arc4.abimethod(
    //     allow_actions=["NoOp"],
    //     create="require",
    // )
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___compute_fibonacci_route@3:
    // contract_iterative.py:23
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contract_iterative.py:9
    // class FibonacciContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // contract_iterative.py:23
    // @arc4.abimethod
    callsub compute_fibonacci
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___get_result_route@4:
    // contract_iterative.py:43
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_result
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@8:
    // contract_iterative.py:9
    // class FibonacciContract(arc4.ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.fibonacci_iterative.contract_iterative.FibonacciContract.compute_fibonacci(n: uint64) -> uint64:
compute_fibonacci:
    // contract_iterative.py:23-24
    // @arc4.abimethod
    // def compute_fibonacci(self, n: UInt64) -> UInt64:
    proto 1 1
    // contract_iterative.py:31-32
    // # Initialize Fibonacci values
    // a = UInt64(0)
    intc_0 // 0
    // contract_iterative.py:33
    // b = UInt64(1)
    intc_1 // 1
    // contract_iterative.py:35-36
    // # Compute Fibonacci iteratively using urange
    // for i in urange(n):
    intc_0 // 0

compute_fibonacci_for_header@1:
    // contract_iterative.py:35-36
    // # Compute Fibonacci iteratively using urange
    // for i in urange(n):
    frame_dig 2
    frame_dig -1
    <
    bz compute_fibonacci_after_for@4
    // contract_iterative.py:37
    // a, b = b, a + b
    frame_dig 0
    frame_dig 1
    dup
    cover 2
    +
    // contract_iterative.py:35-36
    // # Compute Fibonacci iteratively using urange
    // for i in urange(n):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    frame_bury 1
    frame_bury 0
    b compute_fibonacci_for_header@1

compute_fibonacci_after_for@4:
    // contract_iterative.py:39
    // self.result = a  # Store the result in the contract state
    bytec_1 // "result"
    frame_dig 0
    dup
    cover 2
    app_global_put
    // contract_iterative.py:40
    // return a
    frame_bury 0
    retsub


// smart_contracts.fibonacci_iterative.contract_iterative.FibonacciContract.get_result() -> uint64:
get_result:
    // contract_iterative.py:43-44
    // @arc4.abimethod
    // def get_result(self) -> UInt64:
    proto 0 1
    // contract_iterative.py:48
    // return self.result
    intc_0 // 0
    bytec_1 // "result"
    app_global_get_ex
    assert // check self.result exists
    retsub
